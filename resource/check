#!/usr/bin/env bash

set -e -u

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

source $(dirname $0)/lib/log
source $(dirname $0)/lib/crypto
source $(dirname $0)/lib/net

set_log_prefix "resource/check"
log "start" $1

destination=$1
[ -z "${destination}" ] && abort "usage: $0 <path/to/destination>"

# for jq
PATH=/usr/local/bin:$PATH

payload=$(mktemp -d /tmp/resource-check.XXXXXX)
request=$payload/request
response=$payload/response
archive=$payload/archive
touch $request
touch $response
touch $archive

###
# The request from Concourse
cat > $request <&0
log "request"

connection=$(jq -r '"//\(.source.server)/\(.source.share)"' < $request)
directory=$(jq -r '.source.directory // ""' < $request)
user=$(jq -r '.source.user // ""' < $request)
password=$(jq -r '.source.password // ""' < $request)
path=$(jq -r '.params.path // ""' < $request)

###
# Get the resources
# - build network command
log "connection" $connection
command=$(smb_get \
	$connection \
	$directory \
	$path \
	$archive \
	$user \
	$password
)
log "command" $command

# - execute network command
eval $command 2>&1

###
# Examine retrieved resources
# - generate fingerprint of archive contents
hash=$(cat $archive | generate_hash | format_hash)

###
# Generate Response
# - basic string, using the fingerprint
response="{ \"ref\": \"${hash}\" }"
log "response" $response
# - send response
success $response
